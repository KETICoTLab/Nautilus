---
- name: Download MinIO image tar and load into containerd
  hosts: "{{ target_host }}"
  become: yes  # Root 권한 필요
  tasks:

    # Node에 등록하면서 깔았다고 가정
    # - name: Install required packages (mc, containerd)
    #   ansible.builtin.package:
    #     name:
    #       - mc
    #       - containerd
    #     state: present
  - name: Update system packages
    apt:
      update_cache: yes
      upgrade: dist

  - name: Install required dependencies
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg
      state: present


  - name: Add Kubernetes GPG key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
      dest: /tmp/Release.key

  - name: Convert Kubernetes GPG key to keyring format
    command: gpg --dearmor --batch --yes -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/Release.key

  - name: Add Kubernetes apt repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'

  - name: Update apt cache after adding repositories
    apt:
      update_cache: yes

  - name: Install Docker, containerd
    apt:
      name:
        - containerd.io
      state: present

  - name: Install kubeadm, kubelet, and kubectl
    apt:
      name:
        - kubelet
        - kubeadm
        - kubectl
      state: present
      update_cache: yes

  - name: Hold Kubernetes packages at current version
    shell: apt-mark hold kubelet kubeadm kubectl

  - name: Enable and start kubelet service
    systemd:
      name: kubelet
      enabled: yes
      state: started

  - name: Disable swap
    command: swapoff -a

  - name: Ensure swap is disabled in fstab
    replace:
      path: /etc/fstab
      regexp: '^.*swap.*$'
      replace: ''

  - name: Configure sysctl settings for Kubernetes networking
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
    notify: Reload sysctl

  - name: Apply sysctl settings
    command: sysctl --system

  - name: Configure containerd (SystemdCgroup)
    block:
      - name: Generate default containerd configuration
        command: containerd config default
        register: containerd_config

      - name: Write the containerd configuration to file
        copy:
          content: "{{ containerd_config.stdout }}"
          dest: /etc/containerd/config.toml

      - name: Enable SystemdCgroup in containerd configuration
        replace:
          path: /etc/containerd/config.toml
          regexp: '^\s*SystemdCgroup = false$'
          replace: 'SystemdCgroup = true'

      - name: Restart containerd service
        systemd:
          name: containerd
          state: restarted
          enabled: yes


   - name: Print target host
      ansible.builtin.debug:
        msg: "Running on {{ target_host }}"
        
    - name: Ensure MinIO Client (mc) is configured
      ansible.builtin.command:
        cmd: mc alias set myminio http://minio-server:9000 minio minio123
      changed_when: false

    - name: Download tar file from MinIO
      ansible.builtin.command:
        cmd: mc cp myminio/images/nautilus-pv-updated.tar /tmp/nautilus-pv-updated.tar
      args:
        removes: /tmp/nautilus-pv-updated.tar  # 기존 파일 삭제 후 다운로드

    - name: Check if image exists in containerd
      ansible.builtin.shell: "ctr -n k8s.io images list | grep 'nautilus-pv-updated:latest' || true"
      register: image_check
      changed_when: false

    - name: Remove existing image if found
      ansible.builtin.command: "ctr -n k8s.io images remove nautilus-pv-updated:latest"
      when: image_check.stdout != ""

    - name: Load the image into containerd
      ansible.builtin.command:
        cmd: ctr -n k8s.io images import /tmp/nautilus-pv-updated.tar
      register: result

    - name: Show result
      ansible.builtin.debug:
        msg: "{{ result.stdout }}"
